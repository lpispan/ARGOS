####################################################################################
# docker-compose file for ARGOS Project
# created by lpispan 2024-10
# based on https://github.com/boschkundendienst/guacamole-docker-compose/tree/master
#
# ARGOS Project is an Apache Guacamole extension to manage the remote desktop gateway
# without know the credentials because the credentials are managed by ARGOS client installed
# on remote machines.
# You should manage protocols like VNC, RDP, and SSH using web browser interface.
####################################################################################
#
# What does this file do?
#
# Using docker-compose it will:
#
# - create a network 'argos_compose' with the 'bridge' driver.
# - create a service 'guacd_compose' from 'guacamole/guacd' connected to 'argos_compose'
# - create a service 'postgres_guacamole_compose' (1) from 'postgres' connected to 'argos_compose'
# - create a service 'guacamole_compose' from 'guacamole/guacamole/' conn. to 'argos_compose'
# - create a service 'argos_es_node' from  docker.elastic.co/elasticsearch/elasticsearch connected to 'argos_compose'
# (optional) - create a service 'nginx_guacamole_compose' (2) from 'nginx' connected to 'argos_compose'
#
# (1)
#  DB-Init script is in './init/initdb.sql' it has been created executing
#  'docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgresql > ./init/initdb.sql'
#  once.
#  DATA-DIR       is in './data'
#
# Use .env file to provide the connection parameters
#
#  change it to your needs before first start.
#  To start from scratch delete './data' dir completely
#  './data' will hold all data after first start!
#  The initdb.d scripts are only executed the first time the container is started
#  (and the database files are empty). If the database files already exist then the initdb.d
#  scripts are ignored (e.g. when you mount a local directory or when docker-compose saves
#  the volume and reuses it for the new container).
#
#  !!!!! MAKE SURE your folder './init' is executable (chmod +x ./init)
#  !!!!! or 'initdb.sql' will be ignored!
#  
#  './data' will hold all data after first start!
#
# (23)
#  ./nginx/templates folder will be mapped read-only into the container at /etc/nginx/templates
#  and according to the official nginx container docs the guacamole.conf.template will be
#  placed in /etc/nginx/conf.d/guacamole.conf after container startup.
#  ./nginx/ssl will be mapped into the container at /etc/nginx/ssl
#  prepare.sh creates a a self-signed certificate. If you want to use your own certs
#  just remove the part that generates the certs from prepare.sh and replace
#  'self-ssl.key' and 'self.cert' with your certificate.
#  nginx will export port 8443 to the outside world, make sure that this port is reachable
#  on your system from the "outside world". All other traffic is only internal.
#
#  You could remove the entire 'nginx' service from this file if you want to use your own
#  reverse proxy in front of guacamole. If doing so, make sure you change the line
#   from     - 8080/tcp
#   to       - 8080:8080/tcp
#  within the 'guacamole' service. This will expose the guacamole webinterface directly
#  on port 8080 and you can use it for your own purposes.
#  Note: Guacamole is available on :8080/guacamole, not /.
#
# !!!!! FOR INITAL SETUP (after git clone) run ./prepare.sh once
#
# !!!!! FOR A FULL RESET (WILL ERASE YOUR DATABASE, YOUR FILES, YOUR RECORDS AND CERTS) DO A
# !!!!!  ./reset.sh
#
#
# The initial login to the guacamole webinterface is:
#
#     Username: guacadmin
#     Password: guacadmin
#
# Make sure you change it immediately!
#
#####################################################################################

# networks
# create a network 'argosnetwork_compose' in mode 'bridged'
networks:
  argosnetwork_compose:
    driver: bridge

# services
services:
  # guacd
  guacd:
    container_name: guacd_compose
    image: guacamole/guacd:latest
    networks:
      - argosnetwork_compose
    restart: always
    volumes:
    - ./drive:/drive:rw
    - ./record:/record:rw
  # postgres
  postgres:
    container_name: postgres_guacamole_compose
    environment:
      PGDATA: /var/lib/postgresql/data/guacamole
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
    image: postgres:latest
    networks:
      - argosnetwork_compose
    restart: always
    volumes:
    - ./init:/docker-entrypoint-initdb.d:z
    - ./data:/var/lib/postgresql/data:Z

  # guacamole
  guacamole:
    container_name: guacamole_compose
    depends_on:
    - guacd
    - postgres
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: postgres
      POSTGRES_DATABASE: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
    image: guacamole/guacamole:latest
    networks:
      - argosnetwork_compose
    volumes:
      - ./record:/record:rw
      - ./start.sh:/opt/guacamole/bin/start.sh
      - ./extension/argos.jar:/opt/guacamole/argos.jar  
    ports:
## enable next line if not using nginx#
    - 8080:8080/tcp # Guacamole is on :8080/guacamole, not /.
## enable next line when using nginx
##    - 8080/tcp
    restart: always

  #elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: argos_elastic
    environment:
      - discovery.type=single-node 
      - ES_JAVA_OPTS=$ELASTIC_JAVA_OPTS
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=$ELASTIC_SSL_ENABLED
      - xpack.security.transport.ssl.enabled=$ELASTIC_SSL_ENABLED
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - argosnetwork_compose
    volumes:
      - $ELASTIC_DATA_PATH
    ports:
      - "9200:9200"
      - "9300:9300"

########### optional ##############
  # nginx
  ##nginx:
  ## container_name: nginx_guacamole_compose
  ## restart: always
  ## image: nginx:latest
  ## volumes:
  ## - ./nginx/templates:/etc/nginx/templates:ro
  ## - ./nginx/ssl/self.cert:/etc/nginx/ssl/self.cert:ro
  ## - ./nginx/ssl/self-ssl.key:/etc/nginx/ssl/self-ssl.key:ro
  ## ports:
  ## - 8443:443
  ## networks:
  ##   - argosnetwork_compose
####################################################################################
